@page "/personlist"

@inject ApiService ApiService
@inject IJSRuntime JsRuntime
@using BlazorCSVHelper.Client.APIService
@using BlazorCSVHelper.Shared.DTOs
@using System.Text

<h3>Person List</h3>

<div>
    <input @bind="search" placeholder="Search..." />
    <button @onclick="Search">Search</button>
</div>

<div>
    <label>Sort By:</label>
    <select @bind="sortBy">
        <option value="FirstName">First Name</option>
        <option value="LastName">Last Name</option>
        <option value="Email">Email</option>
    </select>
    <label>Descending:</label>
    <input type="checkbox" @bind="sortDesc" />
</div>

<div>
    <label>Page Size:</label>
    <input type="number" @bind="pageSize" min="1" />
</div>

<button @onclick="DownloadCsv">Download CSV</button>

<table class="table">
    <thead>
        <tr>
            <th>Id</th>
            <th>First Name</th>
            <th>Last Name</th>
            <th>Date of Birth</th>
            <th>Address</th>
            <th>Email</th>
            <th>Phone Number</th>
        </tr>
    </thead>
    <tbody>
        @if (people != null && people.Items?.Any() == true)
        {
            @foreach (var person in people.Items)
            {
                <tr>
                    <td>@person.Id</td>
                    <td>@person.FirstName</td>
                    <td>@person.LastName</td>
                    <td>@person.DateOfBirth.ToString("yyyy-MM-dd")</td>
                    <td>@person.Address</td>
                    <td>@person.Email</td>
                    <td>@person.PhoneNumber</td>
                </tr>
            }
        }
        else
        {
            <tr><td colspan="7">No records found.</td></tr>
        }
    </tbody>
</table>

<div>
    <button @onclick="PreviousPage" disabled="@(!canPrevious)">Previous</button>
    <span>Page @currentPage of @people?.TotalPages</span>
    <button @onclick="NextPage" disabled="@(!canNext)">Next</button>
</div>

@code {
    private PagedResult<Person> people = new();
    private string search = string.Empty;
    private string sortBy = "FirstName";
    private bool sortDesc = false;
    private int currentPage = 1;
    private int pageSize = 10;

    private bool canPrevious => currentPage > 1;
    private bool canNext => people != null && currentPage < people.TotalPages;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        people = await ApiService.GetPersonsAsync(currentPage, pageSize, search, sortBy, sortDesc);
    }

    private async Task Search()
    {
        currentPage = 1;
        await LoadData();
    }

    private async Task PreviousPage()
    {
        if (canPrevious)
        {
            currentPage--;
            await LoadData();
        }
    }

    private async Task NextPage()
    {
        if (canNext)
        {
            currentPage++;
            await LoadData();
        }
    }

    private async Task DownloadCsv()
    {
        if (people?.Items == null || !people.Items.Any())
            return;

        var csvContent = CreateCsv(people.Items);
        var bytes = Encoding.UTF8.GetBytes(csvContent);
        var base64 = Convert.ToBase64String(bytes);
        var url = $"data:text/csv;base64,{base64}";
        await JsRuntime.InvokeVoidAsync("downloadFile", url, "people.csv");
    }

    private string CreateCsv(List<Person> people)
    {
        var csvBuilder = new StringBuilder();
        csvBuilder.AppendLine("Id,FirstName,LastName,DateOfBirth,Address,Email,PhoneNumber");

        foreach (var person in people)
        {
            var address = $"\"{person.Address}\"";
            csvBuilder.AppendLine($"{person.Id},{person.FirstName},{person.LastName},{person.DateOfBirth:yyyy-MM-dd},{address},{person.Email},{person.PhoneNumber}");
        }

        return csvBuilder.ToString();
    }
}
