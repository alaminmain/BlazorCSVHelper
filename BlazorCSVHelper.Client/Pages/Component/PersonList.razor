@page "/personlist"

@inject HttpClient Http
@using System.Net.Http.Json
@using BlazorCSVHelper.Shared.DTOs
@using System.Text

<h3>Person List</h3>

<button @onclick="DownloadCsv">Download CSV</button>

<table class="table">
    <thead>
        <tr>
            <th>Id</th>
            <th>First Name</th>
            <th>Last Name</th>
            <th>Date of Birth</th>
            <th>Address</th>
            <th>Email</th>
            <th>Phone Number</th>
        </tr>
    </thead>
    <tbody>
        @if (people != null)
        {
            @foreach (var person in people)
            {
                <tr>
                    <td>@person.Id</td>
                    <td>@person.FirstName</td>
                    <td>@person.LastName</td>
                    <td>@person.DateOfBirth.ToString("yyyy-MM-dd")</td>
                    <td>@person.Address</td>
                    <td>@person.Email</td>
                    <td>@person.PhoneNumber</td>
                </tr>
            }
        }
    </tbody>
</table>

@code {
    private List<Person> people;

    protected override async Task OnInitializedAsync()
    {
        people = await Http.GetFromJsonAsync<List<Person>>("https://localhost:7029/api/persons");
    }

    private async Task DownloadCsv()
    {
        var csvContent = CreateCsv(people);
        var bytes = System.Text.Encoding.UTF8.GetBytes(csvContent);
        var base64 = Convert.ToBase64String(bytes);

        var url = "data:text/csv;base64," + base64;
        await JsRuntime.InvokeVoidAsync("downloadFile", url, "people.csv");
    }

    private string CreateCsv(List<Person> people)
    {
        var csvBuilder = new StringBuilder();
        csvBuilder.AppendLine("Id,FirstName,LastName,DateOfBirth,Address,Email,PhoneNumber");

        foreach (var person in people)
        {
            var address = $"\"{person.Address}\"";
            csvBuilder.AppendLine($"{person.Id},{person.FirstName},{person.LastName},{person.DateOfBirth:yyyy-MM-dd},{address},{person.Email},{person.PhoneNumber}");
        }

        return csvBuilder.ToString();
    }

    [Inject]
    private IJSRuntime JsRuntime { get; set; }
}

